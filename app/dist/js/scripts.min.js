(function(){var e;e=function(){var e,n,t,a,i,r,o,l,u,c,d,s;t=i(".day"),i=function(e){var n;return n=Array.prototype.slice.apply(document.querySelectorAll(e)),n||(n=[]),n},e=function(){var e,n;n=this,e=function(e,n){e=e||null,n=n||null,this.elem=e,this.value=n,this.hasChanged=!1,this.oninput=function(){}},i(".model").forEach(function(t){t.classList.forEach(function(a){var i,r,o;r=a.match(/model\-/g),r&&(i=a.slice(6),o=t.value,i.indexOf("Month")>-1?o-=1:i.indexOf(!1)&&(o=o||"00:00"),n[i]=n[i]||new e(t,o),t.binding=t.binding||n[i],t.oninput=function(){n[i].hasChanged=!0,n[i]=n[i]||new e(t,o),n[i].value=t.value,n.updateCalculations(),n[i].oninput()})})}),n.updateCalculations=function(){n.startMin=n.startMin||new e(null,n.startTime.value.split(":")[1]),n.startHour=n.startHour||new e(null,n.startTime.value.split(":")[0]),n.endMin=n.endMin||new e(null,n.endTime.value.split(":")[1]),n.endHour=n.endHour||new e(null,n.endTime.value.split(":")[0]),n.date=n.date||new e,n.date.value=new Date(n.startYear.value,n.startMonth.value,n.startDay.value)},n.updateCalculations()},a=function(e,n,t){n.classList.contains("placeholder")&&n.classList.remove("placeholder"),""===e.value&&(e.value=t,e.hasChanged=!1,n.classList.add("placeholder")),n.innerHTML=e.value},c=function(){var e,n,t,a,o;return a=this,e=!1,n="Please correct the following errors: <br>",t=i(".people>div"),o=[{errorMessage:"Please include a title.",validationMethod:function(){return r.title.hasChanged}},{errorMessage:"Please include a description.",validationMethod:function(){return r.description.hasChanged}},{errorMessage:"Please include guests.",validationMethod:function(){return t.length>0?!0:!1}},{errorMessage:"Please include valid email addresses.",validationMethod:function(){var e,n;return e=!1,n=new RegExp("^[-a-z0-9~!$%^&*_=+}{'?]+(.[-a-z0-9~!$%^&*_=+}{'?]+)*@([a-z0-9_][-a-z0-9_]*(.[-a-z0-9_]+)*.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}))(:[0-9]{1,5})?$"),t.forEach(function(t,a){var i;i=n.exec(t.value),e=i&&0===i.index?0===a?!0:e&&!0:e&&!1}),e}}],o.forEach(function(t,i){t.validationMethod(a)?e=0===i?!0:e&&!0:(e=e&&!1,n=n+t.errorMessage+"<br>")}),n=n.trim(),{isValid:e,errorMessage:n}},t.forEach(function(e){var n,t;for(n=1;32>n;)t=document.createElement("option"),10>n?n="0"+n:n+="",t.innerHTML=n,e.appendChild(t),n++}),o=i(".month"),o.forEach(function(e){var n,t;for(n=1;13>n;)t=document.createElement("option"),10>n?n="0"+n:n+="",t.innerHTML=n,e.appendChild(t),n++}),s=i(".year"),s.forEach(function(e){var n,t;for(t=2015;2021>t;)n=document.createElement("option"),n.innerHTML=t+"",e.appendChild(n),t++}),l=document.querySelector("input.new-guest"),u=document.querySelector(".attendees"),l.onkeydown=function(e){var n,t;"Enter"===e.keyIdentifier&&(t=document.createElement("div"),n=document.createElement("button"),n.innerHTML="-",n.parent=t,n.onclick=function(){u.removeChild(this.parent)},t.innerHTML=l.value,t.value=l.value,t.appendChild(n),u.appendChild(t),l.value="")},r=new e,r.title.oninput=function(){var e;e=document.querySelector(".title-display"),a(r.title,e,"Untitled Event")},r.description.oninput=function(){var e;e=document.querySelector(".card-detail-actual.what"),a(r.description,e,"Description")},r.location.oninput=function(){var e;e=document.querySelector(".card-detail-actual.where"),a(r.location,e,"Place")},d=document.querySelector(".card-detail-actual.when"),i(".input-datetime").forEach(function(e){e.binding.oninput=function(){var e;e=r.date.value.toDateString()+" from "+r.startTime.value+" to "+r.endTime.value,a({value:e},d,"Time")}}),n=document.querySelector("button#create"),n.onclick=function(){var e,n;n=c(),n.isValid?alert("Valid form. Thanks for submitting!"):(e=document.querySelector(".error-message"),e.innerHTML=n.errorMessage)}}()}).call(this);
//# sourceMappingURL=data:application/json;base64,
